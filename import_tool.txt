
Import Tool

* Bulk import CSVs by providing a schema, tables, and running in shell
* Works on CSVs compressed using zip or gzip - e.g. file.csv.zip, file.csv.gz

https://neo4j.com/developer/guide-import-csv/
https://neo4j.com/docs/operations-manual/current/tools/import/

# Reference: List of syntax
https://neo4j.com/docs/operations-manual/current/tools/import/syntax/

# Reference: Details of what each option means
https://neo4j.com/docs/operations-manual/current/tools/import/options/

# Detailed info on the import tool
https://neo4j.com/docs/operations-manual/current/tutorial/import-tool/


neo4j-admin import [--mode=csv] [--database=<name>]
                    [--additional-config=<config-file-path>]
                    [--report-file=<filename>]
                    [--nodes[:Label1:Label2]=<"file1,file2,...">]
                    [--relationships[:RELATIONSHIP_TYPE]=<"file1,file2,...">]
                    [--id-type=<STRING|INTEGER|ACTUAL>]
                    [--input-encoding=<character-set>]
                    [--ignore-extra-columns[=<true|false>]]
                    [--ignore-duplicate-nodes[=<true|false>]]
                    [--ignore-missing-nodes[=<true|false>]]
                    [--multiline-fields[=<true|false>]]
                    [--delimiter=<delimiter-character>]
                    [--array-delimiter=<array-delimiter-character>]
                    [--quote=<quotation-character>]
                    [--max-memory=<max-memory-that-importer-can-use>]
                    [--f=<File containing all arguments to this import>]
                    [--high-io=<true/false>]
usage: neo4j-admin import --mode=database [--database=<name>]
                    [--additional-config=<config-file-path>]
                    [--from=<source-directory>]

environment variables:
    NEO4J_CONF    Path to directory which contains neo4j.conf.
    NEO4J_DEBUG   Set to anything to enable debug output.
    NEO4J_HOME    Neo4j home directory.
    HEAP_SIZE     Set JVM maximum heap size during command execution.
                  Takes a number and a unit, for example 512m.

Import a collection of CSV files with --mode=csv (default), or a database from a
pre-3.0 installation with --mode=database.

options:
  --database=<name>
      Name of database. [default:graph.db]
  --additional-config=<config-file-path>
      Configuration file to supply additional configuration in. [default:]
  --mode=<database|csv>
      Import a collection of CSV files or a pre-3.0 installation. [default:csv]
  --from=<source-directory>
      The location of the pre-3.0 database (e.g. <neo4j-root>/data/graph.db).
      [default:]
  --report-file=<filename>
      File in which to store the report of the csv-import.
      [default:import.report]
  --nodes[:Label1:Label2]=<"file1,file2,...">
      Node CSV header and data. Multiple files will be logically seen as one big
      file from the perspective of the importer. The first line must contain the
      header. Multiple data sources like these can be specified in one import,
      where each data source has its own header. Note that file groups must be
      enclosed in quotation marks. [default:]
  --relationships[:RELATIONSHIP_TYPE]=<"file1,file2,...">
      Relationship CSV header and data. Multiple files will be logically seen as
      one big file from the perspective of the importer. The first line must
      contain the header. Multiple data sources like these can be specified in
      one import, where each data source has its own header. Note that file
      groups must be enclosed in quotation marks. [default:]
  --id-type=<STRING|INTEGER|ACTUAL>
      Each node must provide a unique id. This is used to find the correct nodes
      when creating relationships. Possible values are:
        STRING: arbitrary strings for identifying nodes,
        INTEGER: arbitrary integer values for identifying nodes,
        ACTUAL: (advanced) actual node ids.
      For more information on id handling, please see the Neo4j Manual:
      https://neo4j.com/docs/operations-manual/current/tools/import/
      [default:STRING]
  --input-encoding=<character-set>
      Character set that input data is encoded in. [default:UTF-8]
  --ignore-extra-columns=<true|false>
      If un-specified columns should be ignored during the import.
      [default:false]
  --ignore-duplicate-nodes=<true|false>
      If duplicate nodes should be ignored during the import. [default:false]
  --ignore-missing-nodes=<true|false>
      If relationships referring to missing nodes should be ignored during the
      import. [default:false]
  --multiline-fields=<true|false>
      Whether or not fields from input source can span multiple lines, i.e.
      contain newline characters. [default:false]
  --delimiter=<delimiter-character>
      Delimiter character between values in CSV data. [default:,]
  --array-delimiter=<array-delimiter-character>
      Delimiter character between array elements within a value in CSV data.
      [default:;]
  --quote=<quotation-character>
      Character to treat as quotation character for values in CSV data. Quotes
      can be escaped as per RFC 4180 by doubling them, for example "" would be
      interpreted as a literal ". You cannot escape using \. [default:"]
  --max-memory=<max-memory-that-importer-can-use>
      Maximum memory that neo4j-admin can use for various data structures and
      caching to improve performance. Values can be plain numbers, like 10000000
      or e.g. 20G for 20 gigabyte, or even e.g. 70%. [default:90%]
  --f=<File containing all arguments to this import>
      File containing all arguments, used as an alternative to supplying all
      arguments on the command line directly.Each argument can be on a separate
      line or multiple arguments per line separated by space.Arguments
      containing spaces needs to be quoted.Supplying other arguments in addition
      to this file argument is not supported. [default:]
  --high-io=<true/false>
      Ignore environment-based heuristics, and assume that the target storage
      subsystem can support parallel IO with high throughput. [default:null]

                   
# Example
neo4j-admin import --nodes import/movies_header.csv,import/movies.csv \
--nodes import/actors_header.csv,import/actors.csv \
--relationships import/roles_header.csv,import/roles.csv                   
                   

# CSV Headers Formatting
https://neo4j.com/docs/operations-manual/current/tools/import/file-header-format/

Header files: how the data fields should be interpreted
<name>:<field_type>

Data types - default is string
int
long
float
double
boolean - Boolean values are true if they match exactly the text true. All other values are false
byte
short
char
string
point - see neo4j.com/docs/cypher-manual/4.0/functions/spatial/
date - see neo4j.com/docs/cypher-manual/4.0/syntax/temporal/#cypher-temporal-instants
localtime - see neo4j.com/docs/cypher-manual/4.0/syntax/temporal/#cypher-temporal-instants
time - neo4j.com/docs/cypher-manual/4.0/syntax/temporal/#cypher-temporal-instants
localdatetime - see neo4j.com/docs/cypher-manual/4.0/syntax/temporal/#cypher-temporal-instants
datetime - see neo4j.com/docs/cypher-manual/4.0/syntax/temporal/#cypher-temporal-instants
duration

To define an array type, append [] to the type. By default, array values are separated by ;. A different delimiter can be specified with --array-delimiter

Values that contain the delimiter character need to be escaped by enclosing in double quotation marks, or by using a different delimiter character with the --delimiter option

:ID,name:string,joined:date,active:boolean,points:int,city:string,location:point{crs:WGS-84}
user01,Joe Soap,2017-05-05,true,10,"Malmo","{latitude:55.6121514, longitude:12.9950357}"
user02,Jane Doe,2017-08-21,true,15,"London","{y:51.507222, x:-0.1275}"
user03,Moe Know,2018-02-17,false,7,"San Mateo","{latitude:37.554167, longitude:-122.313056, height: 100, crs:'WGS-84-3D'}"

Node files - ID + LABEL + properties
movieID:ID,title:string,year:int,:LABEL
tt0133093,"The Matrix",1999,Movie
tt0234215,"The Matrix Reloaded",2003,Movie;Sequel
tt0242653,"The Matrix Revolutions",2003,Movie;Sequel

personId:ID,name,:LABEL
keanu,"Keanu Reeves",Actor
laurence,"Laurence Fishburne",Actor
carrieanne,"Carrie-Anne Moss",Actor


Relationship files - TYPE + START_ID + END_ID

:START_ID,role,:END_ID,:TYPE
keanu,"Neo",tt0133093,ACTED_IN
keanu,"Neo",tt0234215,ACTED_IN
keanu,"Neo",tt0242653,ACTED_IN
laurence,"Morpheus",tt0133093,ACTED_IN
laurence,"Morpheus",tt0234215,ACTED_IN
laurence,"Morpheus",tt0242653,ACTED_IN
carrieanne,"Trinity",tt0133093,ACTED_IN
carrieanne,"Trinity",tt0234215,ACTED_IN
carrieanne,"Trinity",tt0242653,ACTED_IN


ID Space Identifiers

movieId:ID(Movie-ID),title,year:int,:LABEL
1,"The Matrix",1999,Movie
2,"The Matrix Reloaded",2003,Movie;Sequel
3,"The Matrix Revolutions",2003,Movie;Sequel

personId:ID(Actor-ID),name,:LABEL
1,"Keanu Reeves",Actor
2,"Laurence Fishburne",Actor
3,"Carrie-Anne Moss",Actor

:START_ID(Actor-ID),role,:END_ID(Movie-ID),:TYPE
1,"Neo",1,ACTED_IN
1,"Neo",2,ACTED_IN
1,"Neo",3,ACTED_IN
2,"Morpheus",1,ACTED_IN
2,"Morpheus",2,ACTED_IN
2,"Morpheus",3,ACTED_IN
3,"Trinity",1,ACTED_IN
3,"Trinity",2,ACTED_IN
3,"Trinity",3,ACTED_IN


neo4j-admin import --nodes=import/movies4-header.csv,import/movies4-part.* --nodes=import/actors4-header.csv,import/actors4-part.* --relationships=import/roles4-header.csv,import/roles4-part.*


neo4j-admin import --nodes:Entity=/home/bitnami/stack/neo4j/import/nodes.csv --relationships:PAID=/home/bitnami/stack/neo4j/import/rels.csv --id-type=STRING --ignore-missing-nodes=true 



